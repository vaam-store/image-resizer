{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Image Resize Service","text":"<p>Welcome to the documentation for the Image Resize Service, a high-performance image resizing API built with Rust.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Fast image resizing with multiple storage backends</li> <li>Caching for improved performance</li> <li>Metrics and health monitoring</li> <li>Kubernetes deployment support via Helm</li> <li>Configurable storage options (S3, local filesystem, in-memory)</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># Clone the repository\ngit clone https://github.com/vymalo/image-resizer.git\ncd image-resizer\n\n# Build and run with Docker Compose\ndocker-compose up -d\n</code></pre> <p>Visit the Getting Started section for more detailed instructions.</p>"},{"location":"#api-overview","title":"API Overview","text":"<p>The Image Resize Service provides a RESTful API for resizing and manipulating images. See the API Reference for detailed documentation.</p>"},{"location":"#architecture","title":"Architecture","text":"<p>This service is built with a modular architecture using Rust for high performance. Learn more about the architecture and components.</p>"},{"location":"#deployment","title":"Deployment","text":"<p>The service can be deployed using Docker or Kubernetes with Helm.</p>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"about/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>Initial setup of MkDocs documentation.</li> </ul>"},{"location":"about/changelog/#100-yyyy-mm-dd","title":"[1.0.0] - YYYY-MM-DD","text":""},{"location":"about/changelog/#added_1","title":"Added","text":"<ul> <li>First release of the Image Resize Service.</li> <li>... (details of features in 1.0.0)</li> </ul> <p>This changelog is a template. Please update it with actual changes as the project evolves.</p>"},{"location":"about/license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2025 Stephane SEGNING LAMBOU</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"architecture/components/","title":"Components","text":"<p>This page provides detailed information about the key components of the Image Resize Service.</p>"},{"location":"architecture/components/#api-module","title":"API Module","text":"<p>The API module (<code>src/modules/api/</code>) handles the HTTP API interface and parameter validation.</p>"},{"location":"architecture/components/#key-files","title":"Key Files:","text":"<ul> <li><code>mod.rs</code>: Module definition</li> <li><code>handler.rs</code>: Request handlers</li> <li><code>resize.rs</code>: Resize API implementation</li> </ul> <p>The API module is responsible for: - Parsing and validating request parameters - Converting API requests to service calls - Formatting service responses as API responses - Error handling and response codes</p>"},{"location":"architecture/components/#router-module","title":"Router Module","text":"<p>The Router module (<code>src/modules/router/</code>) manages HTTP routing and middleware.</p>"},{"location":"architecture/components/#key-files_1","title":"Key Files:","text":"<ul> <li><code>mod.rs</code>: Module definition</li> <li><code>router.rs</code>: Route definitions</li> <li><code>middlewares.rs</code>: HTTP middleware implementations</li> </ul> <p>The Router module is responsible for: - Defining API routes - Applying middleware (logging, tracing, etc.) - Request/response handling</p>"},{"location":"architecture/components/#services","title":"Services","text":""},{"location":"architecture/components/#resize-service","title":"Resize Service","text":"<p>The Resize Service (<code>src/services/resize/</code>) handles image resizing operations.</p>"},{"location":"architecture/components/#key-files_2","title":"Key Files:","text":"<ul> <li><code>mod.rs</code>: Module definition</li> <li><code>handler.rs</code>: Resize implementation</li> </ul> <p>The Resize Service is responsible for: - Processing resize parameters - Applying resize operations to images - Handling different resize modes (fit, cover, etc.)</p>"},{"location":"architecture/components/#image-service","title":"Image Service","text":"<p>The Image Service (<code>src/services/image/</code>) handles image processing and manipulation.</p>"},{"location":"architecture/components/#key-files_3","title":"Key Files:","text":"<ul> <li><code>mod.rs</code>: Module definition</li> <li><code>handler.rs</code>: Image processing implementation</li> </ul> <p>The Image Service is responsible for: - Loading images from various sources - Image format conversion - Image quality adjustments</p>"},{"location":"architecture/components/#storage-service","title":"Storage Service","text":"<p>The Storage Service (<code>src/services/storage/</code>) provides a unified interface for different storage backends.</p>"},{"location":"architecture/components/#key-files_4","title":"Key Files:","text":"<ul> <li><code>mod.rs</code>: Module definition</li> <li><code>core.rs</code>: Storage trait definitions</li> <li><code>handler.rs</code>: Storage implementation</li> <li><code>s3_handler.rs</code>: S3 storage implementation</li> <li><code>local_fs_handler.rs</code>: Local filesystem implementation</li> <li><code>in_memory_handler.rs</code>: In-memory storage implementation</li> </ul> <p>The Storage Service is responsible for: - Storing and retrieving images - Managing storage backends - Handling storage errors</p>"},{"location":"architecture/components/#cache-service","title":"Cache Service","text":"<p>The Cache Service (<code>src/services/cache/</code>) provides caching functionality.</p>"},{"location":"architecture/components/#key-files_5","title":"Key Files:","text":"<ul> <li><code>mod.rs</code>: Module definition</li> <li><code>handler.rs</code>: Cache implementation</li> </ul> <p>The Cache Service is responsible for: - Caching processed images - Cache invalidation - Cache hit/miss metrics</p>"},{"location":"architecture/components/#health-service","title":"Health Service","text":"<p>The Health Service (<code>src/services/health/</code>) monitors system health.</p>"},{"location":"architecture/components/#key-files_6","title":"Key Files:","text":"<ul> <li><code>mod.rs</code>: Module definition</li> <li><code>handler.rs</code>: Health check implementation</li> </ul> <p>The Health Service is responsible for: - Providing health check endpoints - Monitoring system components - Reporting system status</p>"},{"location":"architecture/components/#metrics-service","title":"Metrics Service","text":"<p>The Metrics Service (<code>src/services/metrics/</code>) collects and exposes metrics.</p>"},{"location":"architecture/components/#key-files_7","title":"Key Files:","text":"<ul> <li><code>mod.rs</code>: Module definition</li> <li><code>handler.rs</code>: Metrics implementation</li> </ul> <p>The Metrics Service is responsible for: - Collecting performance metrics - Exposing Prometheus-compatible metrics - Monitoring system usage</p>"},{"location":"architecture/components/#utility-modules","title":"Utility Modules","text":""},{"location":"architecture/components/#tracer-module","title":"Tracer Module","text":"<p>The Tracer Module (<code>src/modules/tracer/</code>) provides distributed tracing functionality.</p>"},{"location":"architecture/components/#key-files_8","title":"Key Files:","text":"<ul> <li><code>mod.rs</code>: Module definition</li> <li><code>init.rs</code>: Tracer initialization</li> </ul>"},{"location":"architecture/components/#utils-module","title":"Utils Module","text":"<p>The Utils Module (<code>src/modules/utils/</code>) provides utility functions.</p>"},{"location":"architecture/components/#key-files_9","title":"Key Files:","text":"<ul> <li><code>mod.rs</code>: Module definition</li> <li><code>date.rs</code>: Date/time utilities</li> <li><code>err.rs</code>: Error handling utilities</li> </ul>"},{"location":"architecture/components/#models","title":"Models","text":"<p>The Models (<code>src/models/</code>) define data structures used throughout the application.</p>"},{"location":"architecture/components/#key-files_10","title":"Key Files:","text":"<ul> <li><code>mod.rs</code>: Module definition</li> <li><code>params.rs</code>: API parameter definitions</li> </ul>"},{"location":"architecture/overview/","title":"Architecture Overview","text":"<p>The Image Resize Service is designed with a modular architecture to provide high performance, scalability, and flexibility.</p>"},{"location":"architecture/overview/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Client    \u2502\u2500\u2500\u2500\u2500\u25b6\u2502  API Layer  \u2502\u2500\u2500\u2500\u2500\u25b6\u2502  Services   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502                    \u2502\n                          \u25bc                    \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502   Router    \u2502     \u2502   Storage   \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                              \u2502\n                                              \u25bc\n                                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                        \u2502    Cache    \u2502\n                                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/overview/#key-components","title":"Key Components","text":""},{"location":"architecture/overview/#api-layer","title":"API Layer","text":"<p>The API layer handles incoming HTTP requests, validates parameters, and routes requests to the appropriate service.</p>"},{"location":"architecture/overview/#router","title":"Router","text":"<p>The router manages HTTP routing, middleware integration, and request/response handling.</p>"},{"location":"architecture/overview/#services","title":"Services","text":"<p>The service layer contains the core business logic:</p> <ul> <li>Resize Service: Handles image resizing operations</li> <li>Image Service: Manages image processing and manipulation</li> <li>Storage Service: Interfaces with storage backends</li> <li>Cache Service: Provides caching functionality</li> <li>Health Service: Monitors system health</li> <li>Metrics Service: Collects and exposes metrics</li> </ul>"},{"location":"architecture/overview/#storage","title":"Storage","text":"<p>The storage component provides a unified interface for different storage backends:</p> <ul> <li>S3 Storage</li> <li>Local Filesystem Storage</li> <li>In-Memory Storage</li> </ul>"},{"location":"architecture/overview/#cache","title":"Cache","text":"<p>The cache component improves performance by storing frequently accessed images.</p>"},{"location":"architecture/overview/#request-flow","title":"Request Flow","text":"<ol> <li>Client sends a request to resize an image</li> <li>API layer receives the request and validates parameters</li> <li>Router routes the request to the Resize Service</li> <li>Resize Service checks the Cache for the requested image</li> <li>If not in cache, Resize Service retrieves the image from the source URL</li> <li>Resize Service processes the image according to the requested parameters</li> <li>Processed image is stored in the Cache</li> <li>Processed image is returned to the client</li> </ol>"},{"location":"architecture/overview/#technology-stack","title":"Technology Stack","text":"<ul> <li>Language: Rust</li> <li>Web Framework: Axum/Actix/Rocket (based on project structure)</li> <li>Image Processing: image-rs</li> <li>Storage: AWS SDK for S3, local filesystem</li> <li>Containerization: Docker</li> <li>Orchestration: Kubernetes via Helm</li> <li>Monitoring: Prometheus metrics</li> </ul>"},{"location":"configuration/performance/","title":"Performance Configuration","text":"<p>The image resize service now supports configuring performance parameters through environment variables, providing flexibility without requiring code changes.</p>"},{"location":"configuration/performance/#environment-variables","title":"Environment Variables","text":""},{"location":"configuration/performance/#basic-performance-settings","title":"Basic Performance Settings","text":"Variable Default Description <code>MAX_CONCURRENT_DOWNLOADS</code> <code>20</code> Maximum number of concurrent image downloads <code>MAX_CONCURRENT_PROCESSING</code> CPU count Maximum number of concurrent image processing tasks <code>HTTP_TIMEOUT_SECS</code> <code>30</code> HTTP client timeout in seconds <code>MAX_IMAGE_SIZE_MB</code> <code>50</code> Maximum image size in megabytes <code>CPU_THREAD_POOL_SIZE</code> CPU count Size of the CPU thread pool for image processing <code>ENABLE_HTTP2</code> <code>true</code> Enable HTTP/2 for downloads <code>CONNECTION_POOL_SIZE</code> <code>50</code> Connection pool size per host <code>KEEP_ALIVE_TIMEOUT_SECS</code> <code>60</code> Keep-alive timeout for connections in seconds"},{"location":"configuration/performance/#performance-profiles","title":"Performance Profiles","text":"<p>You can use predefined performance profiles by setting the <code>PERFORMANCE_PROFILE</code> environment variable:</p> Profile Description <code>high_throughput</code> Optimized for maximum throughput with higher resource usage <code>low_latency</code> Optimized for minimal response time <code>memory_efficient</code> Optimized for minimal memory usage <p>When using a profile, individual environment variables will override the profile defaults.</p>"},{"location":"configuration/performance/#examples","title":"Examples","text":""},{"location":"configuration/performance/#basic-configuration","title":"Basic Configuration","text":"<pre><code># Set custom download limits\nexport MAX_CONCURRENT_DOWNLOADS=50\nexport HTTP_TIMEOUT_SECS=15\n\n# Start the service\n./emgr\n</code></pre>"},{"location":"configuration/performance/#using-performance-profiles","title":"Using Performance Profiles","text":"<pre><code># Use high throughput profile\nexport PERFORMANCE_PROFILE=high_throughput\n\n# Override specific settings\nexport MAX_CONCURRENT_DOWNLOADS=100\n\n# Start the service\n./emgr\n</code></pre>"},{"location":"configuration/performance/#memory-constrained-environment","title":"Memory-Constrained Environment","text":"<pre><code># Use memory efficient profile\nexport PERFORMANCE_PROFILE=memory_efficient\n\n# Further reduce memory usage\nexport MAX_CONCURRENT_DOWNLOADS=3\nexport MAX_IMAGE_SIZE_MB=10\n\n# Start the service\n./emgr\n</code></pre>"},{"location":"configuration/performance/#profile-details","title":"Profile Details","text":""},{"location":"configuration/performance/#high-throughput-profile","title":"High Throughput Profile","text":"<ul> <li><code>MAX_CONCURRENT_DOWNLOADS</code>: 50</li> <li><code>MAX_CONCURRENT_PROCESSING</code>: CPU count \u00d7 2</li> <li><code>HTTP_TIMEOUT_SECS</code>: 15</li> <li><code>MAX_IMAGE_SIZE_MB</code>: 100</li> <li><code>CPU_THREAD_POOL_SIZE</code>: CPU count</li> <li><code>ENABLE_HTTP2</code>: true</li> <li><code>CONNECTION_POOL_SIZE</code>: 100</li> <li><code>KEEP_ALIVE_TIMEOUT_SECS</code>: 120</li> </ul>"},{"location":"configuration/performance/#low-latency-profile","title":"Low Latency Profile","text":"<ul> <li><code>MAX_CONCURRENT_DOWNLOADS</code>: 10</li> <li><code>MAX_CONCURRENT_PROCESSING</code>: CPU count</li> <li><code>HTTP_TIMEOUT_SECS</code>: 10</li> <li><code>MAX_IMAGE_SIZE_MB</code>: 20</li> <li><code>CPU_THREAD_POOL_SIZE</code>: CPU count</li> <li><code>ENABLE_HTTP2</code>: true</li> <li><code>CONNECTION_POOL_SIZE</code>: 25</li> <li><code>KEEP_ALIVE_TIMEOUT_SECS</code>: 30</li> </ul>"},{"location":"configuration/performance/#memory-efficient-profile","title":"Memory Efficient Profile","text":"<ul> <li><code>MAX_CONCURRENT_DOWNLOADS</code>: 5</li> <li><code>MAX_CONCURRENT_PROCESSING</code>: CPU count \u00f7 2</li> <li><code>HTTP_TIMEOUT_SECS</code>: 45</li> <li><code>MAX_IMAGE_SIZE_MB</code>: 10</li> <li><code>CPU_THREAD_POOL_SIZE</code>: CPU count \u00f7 2</li> <li><code>ENABLE_HTTP2</code>: false (HTTP/1.1 uses less memory)</li> <li><code>CONNECTION_POOL_SIZE</code>: 10</li> <li><code>KEEP_ALIVE_TIMEOUT_SECS</code>: 30</li> </ul>"},{"location":"configuration/performance/#migration-from-hardcoded-configuration","title":"Migration from Hardcoded Configuration","text":"<p>Previously, performance settings were hardcoded in the application. With this update:</p> <ol> <li>Default behavior remains the same - if no environment variables are set, the service uses the same defaults as before</li> <li>Gradual migration - you can override individual settings without changing everything at once</li> <li>Profile-based configuration - use predefined profiles for common use cases</li> <li>Fine-tuning - combine profiles with individual overrides for optimal performance</li> </ol>"},{"location":"configuration/performance/#monitoring-and-tuning","title":"Monitoring and Tuning","text":"<p>Monitor your application's performance metrics to determine optimal settings:</p> <ul> <li>CPU usage - adjust <code>MAX_CONCURRENT_PROCESSING</code> and <code>CPU_THREAD_POOL_SIZE</code></li> <li>Memory usage - adjust <code>MAX_CONCURRENT_DOWNLOADS</code> and <code>MAX_IMAGE_SIZE_MB</code></li> <li>Network performance - adjust <code>CONNECTION_POOL_SIZE</code> and <code>ENABLE_HTTP2</code></li> <li>Response times - adjust <code>HTTP_TIMEOUT_SECS</code> and <code>KEEP_ALIVE_TIMEOUT_SECS</code></li> </ul> <p>Start with a profile that matches your use case, then fine-tune individual parameters based on your specific requirements and monitoring data.</p>"},{"location":"configuration/performance/#benchmark-configuration","title":"Benchmark Configuration","text":"<p>The included benchmark tool is now fully configurable through environment variables, allowing you to customize performance testing for your specific environment and requirements.</p>"},{"location":"configuration/performance/#benchmark-environment-variables","title":"Benchmark Environment Variables","text":"Variable Default Description <code>BENCHMARK_HOST</code> <code>localhost</code> Target host for benchmark requests <code>BENCHMARK_PORT</code> <code>8080</code> Target port for benchmark requests <code>BENCHMARK_CONCURRENCY_LEVELS</code> <code>1,5,10,20,50</code> Comma-separated list of concurrency levels to test <code>BENCHMARK_TEST_URLS</code> <code>https://picsum.photos/...</code> Comma-separated list of test image URLs <code>BENCHMARK_RESIZE_PARAMS</code> <code>300x300,800x,x600,1200x800</code> Comma-separated list of resize parameters (format: <code>WIDTHxHEIGHT</code>) <code>BENCHMARK_WAIT_BETWEEN_TESTS</code> <code>2</code> Seconds to wait between different concurrency level tests <code>BENCHMARK_REQUEST_TIMEOUT</code> <code>30</code> Request timeout in seconds <code>BENCHMARK_OUTPUT_FORMAT</code> <code>jpg</code> Output image format for resize requests"},{"location":"configuration/performance/#resize-parameters-format","title":"Resize Parameters Format","text":"<p>The <code>BENCHMARK_RESIZE_PARAMS</code> variable accepts parameters in the format <code>WIDTHxHEIGHT</code>: - <code>300x300</code> - Resize to 300x300 pixels - <code>800x</code> - Resize to 800 pixels width, maintain aspect ratio - <code>x600</code> - Resize to 600 pixels height, maintain aspect ratio - <code>1200x800</code> - Resize to 1200x800 pixels</p>"},{"location":"configuration/performance/#benchmark-examples","title":"Benchmark Examples","text":""},{"location":"configuration/performance/#basic-benchmark","title":"Basic Benchmark","text":"<pre><code># Run benchmark with default settings\ncargo run --bin benchmark\n</code></pre>"},{"location":"configuration/performance/#custom-target-server","title":"Custom Target Server","text":"<pre><code># Test against a different server\nexport BENCHMARK_HOST=production-server.com\nexport BENCHMARK_PORT=443\ncargo run --bin benchmark\n</code></pre>"},{"location":"configuration/performance/#high-concurrency-testing","title":"High Concurrency Testing","text":"<pre><code># Test with higher concurrency levels\nexport BENCHMARK_CONCURRENCY_LEVELS=1,10,25,50,100,200\nexport BENCHMARK_REQUEST_TIMEOUT=60\ncargo run --bin benchmark\n</code></pre>"},{"location":"configuration/performance/#custom-test-images","title":"Custom Test Images","text":"<pre><code># Use your own test images\nexport BENCHMARK_TEST_URLS=\"https://example.com/image1.jpg,https://example.com/image2.png,https://example.com/image3.webp\"\nexport BENCHMARK_RESIZE_PARAMS=\"100x100,500x500,1000x,x800\"\nexport BENCHMARK_OUTPUT_FORMAT=webp\ncargo run --bin benchmark\n</code></pre>"},{"location":"configuration/performance/#quick-performance-check","title":"Quick Performance Check","text":"<pre><code># Fast benchmark for CI/CD pipelines\nexport BENCHMARK_CONCURRENCY_LEVELS=1,5,10\nexport BENCHMARK_WAIT_BETWEEN_TESTS=1\nexport BENCHMARK_REQUEST_TIMEOUT=15\ncargo run --bin benchmark\n</code></pre>"},{"location":"configuration/performance/#benchmark-output","title":"Benchmark Output","text":"<p>The benchmark provides detailed performance metrics: - Successful requests - Number of successful vs total requests - Total time - Time taken for all requests at each concurrency level - Requests/sec - Throughput measurement - Throughput - Data transfer rate in MB/s - Response times - Average, minimum, and maximum response times</p>"},{"location":"configuration/performance/#integration-with-performance-profiles","title":"Integration with Performance Profiles","text":"<p>You can combine benchmark configuration with performance profiles to test different server configurations:</p> <pre><code># Test high throughput profile\nexport PERFORMANCE_PROFILE=high_throughput\n./emgr &amp;\n\n# Run benchmark against high throughput configuration\nexport BENCHMARK_CONCURRENCY_LEVELS=10,50,100,200\nexport BENCHMARK_REQUEST_TIMEOUT=60\ncargo run --bin benchmark\n\n# Stop server and test memory efficient profile\nkillall emgr\nexport PERFORMANCE_PROFILE=memory_efficient\n./emgr &amp;\n\n# Run benchmark with lower concurrency\nexport BENCHMARK_CONCURRENCY_LEVELS=1,5,10\ncargo run --bin benchmark\n</code></pre> <p>This configurable approach allows you to: 1. Test different environments - development, staging, production 2. Validate performance profiles - ensure profiles meet your requirements 3. Automate performance testing - integrate into CI/CD pipelines 4. Custom load patterns - simulate your specific usage patterns</p>"},{"location":"deployment/docker/","title":"Docker Deployment","text":"<p>This guide explains how to deploy the Image Resize Service using Docker.</p>"},{"location":"deployment/docker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed</li> </ul>"},{"location":"deployment/docker/#building-the-docker-image","title":"Building the Docker Image","text":"<p>A <code>Dockerfile</code> is provided in the project root.</p> <pre><code># Navigate to the project root\ncd /path/to/image-resizer\n\n# Build the Docker image\ndocker build -t image-resizer:latest .\n</code></pre>"},{"location":"deployment/docker/#running-the-docker-container","title":"Running the Docker Container","text":""},{"location":"deployment/docker/#basic-run","title":"Basic Run","text":"<pre><code>docker run -d -p 8080:8080 --name image-resizer-app image-resizer:latest\n</code></pre> <p>This will run the service in detached mode and map port 8080 of the container to port 8080 on the host.</p>"},{"location":"deployment/docker/#with-environment-variables","title":"With Environment Variables","text":"<p>You can configure the service using environment variables. See the Configuration guide for available variables.</p> <pre><code>docker run -d -p 8080:8080 \\\n  -e PORT=8080 \\\n  -e STORAGE_TYPE=s3 \\\n  -e S3_BUCKET=my-image-bucket \\\n  -e AWS_ACCESS_KEY_ID=YOUR_ACCESS_KEY \\\n  -e AWS_SECRET_ACCESS_KEY=YOUR_SECRET_KEY \\\n  -e S3_REGION=us-east-1 \\\n  --name image-resizer-app \\\n  image-resizer:latest\n</code></pre>"},{"location":"deployment/docker/#using-docker-compose","title":"Using Docker Compose","text":"<p>A <code>compose.yaml</code> file is provided for easier local development and deployment.</p> <pre><code># Start the service\ndocker-compose up -d\n\n# Stop the service\ndocker-compose down\n\n# View logs\ndocker-compose logs -f\n</code></pre> <p>The <code>compose.yaml</code> file typically includes: - The application service definition. - Potentially other services like a local MinIO instance for S3 testing.</p> <p>Refer to the <code>compose.yaml</code> in the project root for the exact configuration.</p>"},{"location":"deployment/docker/#managing-the-container","title":"Managing the Container","text":"<ul> <li>View logs: <code>docker logs image-resizer-app</code></li> <li>Stop the container: <code>docker stop image-resizer-app</code></li> <li>Start the container: <code>docker start image-resizer-app</code></li> <li>Remove the container: <code>docker rm image-resizer-app</code></li> </ul>"},{"location":"deployment/docker/#pushing-to-a-docker-registry","title":"Pushing to a Docker Registry","text":"<p>If you want to deploy the image to a remote environment (like Kubernetes), you'll need to push it to a Docker registry (e.g., Docker Hub, AWS ECR, Google GCR).</p> <p>```bash</p>"},{"location":"deployment/docker/#tag-the-image-replace-and","title":"Tag the image (replace  and ) <p>docker tag image-resizer:latest /:latest","text":""},{"location":"deployment/docker/#log-in-to-your-docker-registry","title":"Log in to your Docker registry <p>docker login</p>","text":""},{"location":"deployment/docker/#push-the-image","title":"Push the image <p>docker push /:latest","text":""},{"location":"deployment/helm-chart/","title":"Helm Chart Deployment","text":"<p>This guide explains how to deploy the Image Resize Service to Kubernetes using the provided Helm chart.</p>"},{"location":"deployment/helm-chart/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes cluster</li> <li>Helm 3 installed</li> </ul>"},{"location":"deployment/helm-chart/#chart-location","title":"Chart Location","text":"<p>The Helm chart is located in the <code>helm/emgr/</code> directory in the repository.</p>"},{"location":"deployment/helm-chart/#configuration","title":"Configuration","text":"<p>You can customize the deployment by modifying the <code>helm/emgr/values.yaml</code> file.</p> <p>Key configuration options:</p> <ul> <li><code>replicaCount</code>: Number of replicas</li> <li><code>image.repository</code>: Docker image repository</li> <li><code>image.pullPolicy</code>: Image pull policy</li> <li><code>image.tag</code>: Image tag</li> <li><code>service.type</code>: Service type (ClusterIP, NodePort, LoadBalancer)</li> <li><code>service.port</code>: Service port</li> <li><code>ingress.enabled</code>: Enable Ingress</li> <li><code>ingress.className</code>: Ingress class name</li> <li><code>ingress.hosts</code>: Ingress hosts</li> <li><code>ingress.tls</code>: Ingress TLS configuration</li> <li><code>resources</code>: CPU/memory resource requests and limits</li> <li><code>autoscaling.enabled</code>: Enable Horizontal Pod Autoscaler</li> <li><code>autoscaling.minReplicas</code>: Minimum replicas for HPA</li> <li><code>autoscaling.maxReplicas</code>: Maximum replicas for HPA</li> <li><code>autoscaling.targetCPUUtilizationPercentage</code>: Target CPU utilization</li> <li><code>autoscaling.targetMemoryUtilizationPercentage</code>: Target memory utilization</li> <li><code>envVars</code>: Environment variables for the application (see Configuration)</li> </ul>"},{"location":"deployment/helm-chart/#deployment-steps","title":"Deployment Steps","text":""},{"location":"deployment/helm-chart/#1-add-helm-repository-if-applicable","title":"1. Add Helm Repository (if applicable)","text":"<p>If the chart is hosted in a Helm repository, add it first:</p> <pre><code>helm repo add &lt;repo-name&gt; &lt;repo-url&gt;\nhelm repo update\n</code></pre>"},{"location":"deployment/helm-chart/#2-install-the-chart","title":"2. Install the Chart","text":"<p>Navigate to the chart directory or use the repository:</p> <pre><code># From local directory\nhelm install image-resizer ./helm/emgr --namespace image-resizer --create-namespace\n\n# Or from Helm repository\nhelm install image-resizer &lt;repo-name&gt;/emgr --namespace image-resizer --create-namespace\n</code></pre>"},{"location":"deployment/helm-chart/#3-verify-the-deployment","title":"3. Verify the Deployment","text":"<pre><code>kubectl get pods -n image-resizer\nkubectl get svc -n image-resizer\n</code></pre>"},{"location":"deployment/helm-chart/#upgrading-the-deployment","title":"Upgrading the Deployment","text":"<pre><code>helm upgrade image-resizer ./helm/emgr --namespace image-resizer\n</code></pre>"},{"location":"deployment/helm-chart/#uninstalling-the-deployment","title":"Uninstalling the Deployment","text":"<pre><code>helm uninstall image-resizer --namespace image-resizer\n</code></pre>"},{"location":"deployment/helm-chart/#github-pages-deployment","title":"GitHub Pages Deployment","text":"<p>The documentation itself can be deployed to GitHub Pages. This is typically handled by a GitHub Actions workflow. See GitHub Actions Workflow for more details.</p>"},{"location":"development/contributing/","title":"Contributing","text":"<p>Thank you for considering contributing to the Image Resize Service!</p>"},{"location":"development/contributing/#how-to-contribute","title":"How to Contribute","text":"<p>We welcome contributions in various forms:</p> <ul> <li>Bug Reports: If you find a bug, please open an issue on GitHub.</li> <li>Feature Requests: If you have an idea for a new feature, please open an issue to discuss it.</li> <li>Code Contributions: Pull requests are welcome!</li> <li>Documentation Improvements: If you find any gaps or errors in the documentation, please let us know or submit a pull request.</li> </ul>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":"<p>Please refer to the Installation guide for setting up your local development environment.</p>"},{"location":"development/contributing/#code-style","title":"Code Style","text":"<p>This project follows standard Rust coding conventions. Please run <code>cargo fmt</code> to format your code before submitting a pull request.</p> <p>We also use Clippy for linting:</p> <pre><code>cargo clippy --all-targets --all-features -- -D warnings\n</code></pre> <p>Refer to the <code>.clippy.toml</code> file for specific Clippy configurations.</p>"},{"location":"development/contributing/#commit-messages","title":"Commit Messages","text":"<p>Please follow the Conventional Commits specification for your commit messages. This helps in automating changelog generation and versioning.</p> <p>Example:</p> <pre><code>feat: Add support for WEBP output format\n\nThis commit introduces the ability to output images in WEBP format.\n- Added WEBP encoding option.\n- Updated API documentation.\n</code></pre>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork the repository and create your branch from <code>main</code>.</li> <li>Make your changes.</li> <li>Add tests for your changes.</li> <li>Ensure all tests pass: <code>cargo test</code>.</li> <li>Format your code: <code>cargo fmt</code>.</li> <li>Lint your code: <code>cargo clippy</code>.</li> <li>Commit your changes using conventional commit messages.</li> <li>Push your branch to your fork.</li> <li>Open a pull request to the <code>main</code> branch of the original repository.</li> </ol> <p>Please provide a clear description of your changes in the pull request.</p>"},{"location":"development/contributing/#testing","title":"Testing","text":"<p>Refer to the Testing guide for more details on how to run and write tests.</p>"},{"location":"development/contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the LICENSE file.</p>"},{"location":"development/testing/","title":"Testing","text":"<p>This guide explains how to run and write tests for the Image Resize Service.</p>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":"<p>To run all tests in the project:</p> <pre><code>cargo test\n</code></pre> <p>This command will execute unit tests, integration tests, and documentation tests.</p>"},{"location":"development/testing/#running-specific-tests","title":"Running Specific Tests","text":"<ul> <li>Run tests for a specific package:   <pre><code>cargo test -p &lt;package-name&gt;\n</code></pre></li> <li>Run tests for a specific module:   <pre><code>cargo test src/modules/api/mod.rs\n</code></pre></li> <li>Run a specific test function:   <pre><code>cargo test my_test_function_name\n</code></pre></li> </ul>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":"<p>To generate a test coverage report, you can use tools like <code>cargo-tarpaulin</code> or <code>grcov</code>.</p> <p>Example with <code>cargo-tarpaulin</code>:</p> <pre><code>cargo install cargo-tarpaulin\ncargo tarpaulin --out Html\n</code></pre> <p>This will generate an HTML coverage report in <code>./tarpaulin-report.html</code>.</p>"},{"location":"development/testing/#writing-tests","title":"Writing Tests","text":""},{"location":"development/testing/#unit-tests","title":"Unit Tests","text":"<p>Unit tests are typically placed in the same file as the code they are testing, within a <code>#[cfg(test)]</code> module.</p> <p>Example:</p> <pre><code>// src/my_module.rs\n\npub fn add(a: i32, b: i32) -&gt; i32 {\n    a + b\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_add() {\n        assert_eq!(add(2, 2), 4);\n    }\n}\n</code></pre>"},{"location":"development/testing/#integration-tests","title":"Integration Tests","text":"<p>Integration tests are placed in the <code>tests/</code> directory at the root of the crate. Each <code>.rs</code> file in this directory is compiled as a separate crate.</p> <p>Example (<code>tests/integration_test.rs</code>):</p> <pre><code>use image_resize; // Assuming your crate name is image_resize\n\n#[test]\nfn test_some_integration_scenario() {\n    // Your integration test logic here\n    // For example, call API endpoints and verify responses\n}\n</code></pre>"},{"location":"development/testing/#test-organization","title":"Test Organization","text":"<ul> <li>Unit tests: Test individual functions and modules in isolation.</li> <li>Integration tests: Test how different parts of the application work together. This often involves testing API endpoints, database interactions, etc.</li> </ul>"},{"location":"development/testing/#mocking","title":"Mocking","text":"<p>For testing components that interact with external services (like S3 or databases), consider using mocking libraries or techniques:</p> <ul> <li>Mockall: A powerful mocking library for Rust.</li> <li>Test Doubles: Implement simple test doubles (stubs, fakes) for dependencies.</li> <li>In-memory implementations: Use in-memory versions of services (e.g., in-memory storage handler) for testing.</li> </ul>"},{"location":"development/testing/#best-practices","title":"Best Practices","text":"<ul> <li>Write tests for all new features and bug fixes.</li> <li>Keep tests small and focused on a single piece of functionality.</li> <li>Ensure tests are independent and can be run in any order.</li> <li>Use descriptive test names.</li> <li>Test edge cases and error conditions.</li> <li>Aim for high test coverage.</li> </ul>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>The Image Resize Service can be configured using environment variables or a <code>.env</code> file in the project root.</p>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"Variable Description Default Required <code>PORT</code> HTTP server port <code>8080</code> No <code>LOG_LEVEL</code> Log level (debug, info, warn, error) <code>info</code> No <code>STORAGE_TYPE</code> Storage backend type (s3, local, memory) <code>memory</code> No <code>CACHE_ENABLED</code> Enable caching <code>true</code> No <code>CACHE_TTL_SECONDS</code> Cache time-to-live in seconds <code>3600</code> No"},{"location":"getting-started/configuration/#storage-configuration","title":"Storage Configuration","text":""},{"location":"getting-started/configuration/#s3-storage","title":"S3 Storage","text":"<p>When using <code>STORAGE_TYPE=s3</code>, the following additional variables are required:</p> Variable Description Default Required <code>S3_BUCKET</code> S3 bucket name - Yes <code>S3_REGION</code> AWS region - Yes <code>AWS_ACCESS_KEY_ID</code> AWS access key ID - Yes <code>AWS_SECRET_ACCESS_KEY</code> AWS secret access key - Yes <code>S3_ENDPOINT</code> Custom S3 endpoint (for MinIO, etc.) - No"},{"location":"getting-started/configuration/#local-filesystem-storage","title":"Local Filesystem Storage","text":"<p>When using <code>STORAGE_TYPE=local</code>, the following additional variables are required:</p> Variable Description Default Required <code>LOCAL_STORAGE_PATH</code> Path to local storage directory <code>./storage</code> No"},{"location":"getting-started/configuration/#example-env-file","title":"Example .env File","text":"<pre><code>PORT=8080\nLOG_LEVEL=info\nSTORAGE_TYPE=s3\nCACHE_ENABLED=true\nCACHE_TTL_SECONDS=3600\n\n# S3 Configuration\nS3_BUCKET=my-images\nS3_REGION=us-west-2\nAWS_ACCESS_KEY_ID=your-access-key\nAWS_SECRET_ACCESS_KEY=your-secret-key\n</code></pre>"},{"location":"getting-started/configuration/#docker-environment-variables","title":"Docker Environment Variables","text":"<p>When running with Docker, you can pass environment variables using the <code>-e</code> flag:</p> <pre><code>docker run -p 8080:8080 \\\n  -e STORAGE_TYPE=s3 \\\n  -e S3_BUCKET=my-images \\\n  -e S3_REGION=us-west-2 \\\n  -e AWS_ACCESS_KEY_ID=your-access-key \\\n  -e AWS_SECRET_ACCESS_KEY=your-secret-key \\\n  image-resizer:latest\n</code></pre>"},{"location":"getting-started/configuration/#helm-chart-configuration","title":"Helm Chart Configuration","text":"<p>When deploying with Helm, you can configure the service by modifying the <code>values.yaml</code> file. See the Helm Chart documentation for details.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will help you install and run the Image Resize Service.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Rust 1.70 or later</li> <li>Docker (optional, for containerized deployment)</li> <li>Kubernetes (optional, for Kubernetes deployment)</li> <li>Helm (optional, for Helm chart deployment)</li> </ul>"},{"location":"getting-started/installation/#local-development-setup","title":"Local Development Setup","text":""},{"location":"getting-started/installation/#clone-the-repository","title":"Clone the Repository","text":"<pre><code>git clone https://github.com/vymalo/image-resizer.git\ncd image-resizer\n</code></pre>"},{"location":"getting-started/installation/#build-and-run-locally","title":"Build and Run Locally","text":"<pre><code># Build the project\ncargo build\n\n# Run the service\ncargo run\n</code></pre> <p>The service will be available at <code>http://localhost:8080</code>.</p>"},{"location":"getting-started/installation/#docker-deployment","title":"Docker Deployment","text":""},{"location":"getting-started/installation/#using-docker-compose","title":"Using Docker Compose","text":"<p>The easiest way to get started is using Docker Compose:</p> <pre><code># Start the service\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f\n</code></pre>"},{"location":"getting-started/installation/#building-and-running-the-docker-image","title":"Building and Running the Docker Image","text":"<pre><code># Build the Docker image\ndocker build -t image-resizer:latest .\n\n# Run the container\ndocker run -p 8080:8080 image-resizer:latest\n</code></pre>"},{"location":"getting-started/installation/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<p>See the Helm Chart documentation for details on deploying to Kubernetes.</p>"},{"location":"user-guide/api-reference/","title":"API Reference","text":"<p>The Image Resize Service provides a RESTful API for resizing and manipulating images.</p>"},{"location":"user-guide/api-reference/#openapi-specification","title":"OpenAPI Specification","text":"<p>The complete API specification is available in OpenAPI format in the openapi.yaml file in the repository root.</p>"},{"location":"user-guide/api-reference/#base-url","title":"Base URL","text":"<pre><code>http://localhost:8080/api/v1\n</code></pre> <p>When deployed, replace <code>localhost:8080</code> with your actual service domain.</p>"},{"location":"user-guide/api-reference/#endpoints","title":"Endpoints","text":""},{"location":"user-guide/api-reference/#resize-image","title":"Resize Image","text":"<pre><code>GET /resize\n</code></pre> <p>Resizes an image according to the specified parameters.</p>"},{"location":"user-guide/api-reference/#query-parameters","title":"Query Parameters","text":"Parameter Type Description Required <code>url</code> string URL of the source image Yes <code>width</code> integer Target width in pixels No <code>height</code> integer Target height in pixels No <code>format</code> string Output format (jpeg, png, webp) No <code>quality</code> integer Output quality (1-100, for jpeg and webp) No <code>fit</code> string Fit method (cover, contain, fill, inside, outside) No"},{"location":"user-guide/api-reference/#example-request","title":"Example Request","text":"<pre><code>GET /api/v1/resize?url=https://example.com/image.jpg&amp;width=800&amp;height=600&amp;format=webp&amp;quality=90&amp;fit=cover\n</code></pre>"},{"location":"user-guide/api-reference/#response","title":"Response","text":"<p>The response is the resized image in the requested format.</p>"},{"location":"user-guide/api-reference/#status-codes","title":"Status Codes","text":"Status Code Description 200 Success 400 Bad Request - Invalid parameters 404 Not Found - Source image not found 500 Internal Server Error"},{"location":"user-guide/api-reference/#health-check","title":"Health Check","text":"<pre><code>GET /health\n</code></pre> <p>Returns the health status of the service.</p>"},{"location":"user-guide/api-reference/#example-request_1","title":"Example Request","text":"<pre><code>GET /api/v1/health\n</code></pre>"},{"location":"user-guide/api-reference/#example-response","title":"Example Response","text":"<pre><code>{\n  \"status\": \"ok\",\n  \"version\": \"1.0.0\"\n}\n</code></pre>"},{"location":"user-guide/api-reference/#metrics","title":"Metrics","text":"<pre><code>GET /metrics\n</code></pre> <p>Returns service metrics in Prometheus format.</p>"},{"location":"user-guide/api-reference/#example-request_2","title":"Example Request","text":"<pre><code>GET /api/v1/metrics\n</code></pre>"},{"location":"user-guide/api-reference/#error-responses","title":"Error Responses","text":"<p>Error responses are returned in JSON format:</p> <p>```json {   \"error\": {     \"code\": \"BAD_REQUEST\",     \"message\": \"Invalid width parameter\"   } }</p>"},{"location":"user-guide/examples/","title":"Usage Examples","text":"<p>This page provides practical examples of how to use the Image Resize Service API.</p>"},{"location":"user-guide/examples/#basic-resizing","title":"Basic Resizing","text":""},{"location":"user-guide/examples/#resize-to-specific-dimensions","title":"Resize to Specific Dimensions","text":"<pre><code>GET /api/v1/resize?url=https://example.com/image.jpg&amp;width=800&amp;height=600\n</code></pre> <p>This will resize the image to 800x600 pixels, maintaining the aspect ratio.</p>"},{"location":"user-guide/examples/#resize-to-specific-width-maintaining-aspect-ratio","title":"Resize to Specific Width (Maintaining Aspect Ratio)","text":"<pre><code>GET /api/v1/resize?url=https://example.com/image.jpg&amp;width=800\n</code></pre> <p>This will resize the image to 800 pixels wide, maintaining the aspect ratio.</p>"},{"location":"user-guide/examples/#resize-to-specific-height-maintaining-aspect-ratio","title":"Resize to Specific Height (Maintaining Aspect Ratio)","text":"<pre><code>GET /api/v1/resize?url=https://example.com/image.jpg&amp;height=600\n</code></pre> <p>This will resize the image to 600 pixels tall, maintaining the aspect ratio.</p>"},{"location":"user-guide/examples/#format-conversion","title":"Format Conversion","text":""},{"location":"user-guide/examples/#convert-to-webp","title":"Convert to WebP","text":"<pre><code>GET /api/v1/resize?url=https://example.com/image.jpg&amp;format=webp\n</code></pre> <p>This will convert the image to WebP format without resizing.</p>"},{"location":"user-guide/examples/#convert-to-jpeg-with-quality-setting","title":"Convert to JPEG with Quality Setting","text":"<pre><code>GET /api/v1/resize?url=https://example.com/image.png&amp;format=jpeg&amp;quality=85\n</code></pre> <p>This will convert the image to JPEG format with 85% quality.</p>"},{"location":"user-guide/examples/#fit-methods","title":"Fit Methods","text":""},{"location":"user-guide/examples/#cover-crop-to-fill","title":"Cover (Crop to Fill)","text":"<pre><code>GET /api/v1/resize?url=https://example.com/image.jpg&amp;width=800&amp;height=600&amp;fit=cover\n</code></pre> <p>This will resize the image to 800x600 pixels, cropping if necessary to maintain the aspect ratio.</p>"},{"location":"user-guide/examples/#contain-letterbox","title":"Contain (Letterbox)","text":"<pre><code>GET /api/v1/resize?url=https://example.com/image.jpg&amp;width=800&amp;height=600&amp;fit=contain\n</code></pre> <p>This will resize the image to fit within 800x600 pixels, adding letterboxing if necessary.</p>"},{"location":"user-guide/examples/#fill-stretch","title":"Fill (Stretch)","text":"<pre><code>GET /api/v1/resize?url=https://example.com/image.jpg&amp;width=800&amp;height=600&amp;fit=fill\n</code></pre> <p>This will stretch the image to 800x600 pixels, potentially distorting the aspect ratio.</p>"},{"location":"user-guide/examples/#client-integration-examples","title":"Client Integration Examples","text":""},{"location":"user-guide/examples/#html","title":"HTML","text":"<pre><code>&lt;img src=\"https://your-service.com/api/v1/resize?url=https://example.com/image.jpg&amp;width=800\" alt=\"Resized Image\"&gt;\n</code></pre>"},{"location":"user-guide/examples/#javascript-fetch","title":"JavaScript Fetch","text":"<pre><code>fetch('https://your-service.com/api/v1/resize?url=https://example.com/image.jpg&amp;width=800')\n  .then(response =&gt; response.blob())\n  .then(blob =&gt; {\n    const img = document.createElement('img');\n    img.src = URL.createObjectURL(blob);\n    document.body.appendChild(img);\n  });\n</code></pre>"},{"location":"user-guide/examples/#curl","title":"cURL","text":"<pre><code>curl -o resized.jpg \"https://your-service.com/api/v1/resize?url=https://example.com/image.jpg&amp;width=800\"\n</code></pre>"},{"location":"user-guide/examples/#python-requests","title":"Python Requests","text":"<p>```python import requests from PIL import Image from io import BytesIO</p> <p>response = requests.get(     \"https://your-service.com/api/v1/resize\",     params={         \"url\": \"https://example.com/image.jpg\",         \"width\": 800,         \"format\": \"webp\"     } )</p> <p>img = Image.open(BytesIO(response.content)) img.save(\"resized.webp\")</p>"}]}